// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Placica.Core.Infraestructure.Data.Context;

namespace Placica.Core.WebAPI.Migrations
{
    [DbContext(typeof(PlacicaContext))]
    [Migration("20200723211803_usuarilogin")]
    partial class usuarilogin
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Placica.Core.Library.Entities.Calificacion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<long>("ParametroDetalleId")
                        .HasColumnType("bigint");

                    b.Property<long>("PedidoId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductoId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("Valor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParametroDetalleId");

                    b.HasIndex("ProductoId");

                    b.ToTable("Calificaciones");
                });

            modelBuilder.Entity("Placica.Core.Library.Entities.Categoria", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("Placica.Core.Library.Entities.Cliente", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("Direccion")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Identificacion")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Telefono")
                        .HasColumnType("text");

                    b.Property<long?>("TipoIdentificacionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TipoIdentificacionId");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Placica.Core.Library.Entities.Empresa", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Color1")
                        .HasColumnType("text");

                    b.Property<string>("Color2")
                        .HasColumnType("text");

                    b.Property<string>("Color3")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("Direccion")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Identificacion")
                        .HasColumnType("text");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("RazonSocial")
                        .HasColumnType("text");

                    b.Property<string>("Responsables")
                        .HasColumnType("text");

                    b.Property<string>("SitioWeb")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Telefonos")
                        .HasColumnType("text");

                    b.Property<long?>("TipoId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TipoIdentificacionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TipoId");

                    b.HasIndex("TipoIdentificacionId");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("Placica.Core.Library.Entities.EmpresaCategoria", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CategoriaId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp");

                    b.Property<long>("EmpresaId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("EmpresaCategorias");
                });

            modelBuilder.Entity("Placica.Core.Library.Entities.Parametro", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Titulo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Parametros");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedByUser = "System",
                            CreatedDate = new DateTimeOffset(new DateTime(2020, 7, 23, 21, 18, 2, 335, DateTimeKind.Unspecified).AddTicks(300), new TimeSpan(0, 0, 0, 0, 0)),
                            Descripcion = "Tipo Identificacion",
                            ModifiedByUser = "System",
                            ModifiedDate = new DateTimeOffset(new DateTime(2020, 7, 23, 21, 18, 2, 335, DateTimeKind.Unspecified).AddTicks(1070), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = true,
                            Titulo = "TIPOIDENTIFICACION"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedByUser = "System",
                            CreatedDate = new DateTimeOffset(new DateTime(2020, 7, 23, 21, 18, 2, 335, DateTimeKind.Unspecified).AddTicks(2000), new TimeSpan(0, 0, 0, 0, 0)),
                            Descripcion = "Genero",
                            ModifiedByUser = "System",
                            ModifiedDate = new DateTimeOffset(new DateTime(2020, 7, 23, 21, 18, 2, 335, DateTimeKind.Unspecified).AddTicks(2020), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = true,
                            Titulo = "GENERO"
                        });
                });

            modelBuilder.Entity("Placica.Core.Library.Entities.ParametroDetalle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<long>("ParametroId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParametroId");

                    b.ToTable("ParametroDetalles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedByUser = "System",
                            CreatedDate = new DateTimeOffset(new DateTime(2020, 7, 23, 21, 18, 2, 337, DateTimeKind.Unspecified).AddTicks(4930), new TimeSpan(0, 0, 0, 0, 0)),
                            Descripcion = "Cedula",
                            ModifiedByUser = "System",
                            ModifiedDate = new DateTimeOffset(new DateTime(2020, 7, 23, 21, 18, 2, 337, DateTimeKind.Unspecified).AddTicks(4930), new TimeSpan(0, 0, 0, 0, 0)),
                            ParametroId = 1L,
                            Status = true,
                            Value = "Cedula"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedByUser = "System",
                            CreatedDate = new DateTimeOffset(new DateTime(2020, 7, 23, 21, 18, 2, 337, DateTimeKind.Unspecified).AddTicks(5150), new TimeSpan(0, 0, 0, 0, 0)),
                            Descripcion = "NIT",
                            ModifiedByUser = "System",
                            ModifiedDate = new DateTimeOffset(new DateTime(2020, 7, 23, 21, 18, 2, 337, DateTimeKind.Unspecified).AddTicks(5150), new TimeSpan(0, 0, 0, 0, 0)),
                            ParametroId = 1L,
                            Status = true,
                            Value = "NIT"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedByUser = "System",
                            CreatedDate = new DateTimeOffset(new DateTime(2020, 7, 23, 21, 18, 2, 337, DateTimeKind.Unspecified).AddTicks(5170), new TimeSpan(0, 0, 0, 0, 0)),
                            Descripcion = "Masculino",
                            ModifiedByUser = "System",
                            ModifiedDate = new DateTimeOffset(new DateTime(2020, 7, 23, 21, 18, 2, 337, DateTimeKind.Unspecified).AddTicks(5170), new TimeSpan(0, 0, 0, 0, 0)),
                            ParametroId = 2L,
                            Status = true,
                            Value = "M"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedByUser = "System",
                            CreatedDate = new DateTimeOffset(new DateTime(2020, 7, 23, 21, 18, 2, 337, DateTimeKind.Unspecified).AddTicks(5190), new TimeSpan(0, 0, 0, 0, 0)),
                            Descripcion = "Femenino",
                            ModifiedByUser = "System",
                            ModifiedDate = new DateTimeOffset(new DateTime(2020, 7, 23, 21, 18, 2, 337, DateTimeKind.Unspecified).AddTicks(5190), new TimeSpan(0, 0, 0, 0, 0)),
                            ParametroId = 2L,
                            Status = true,
                            Value = "F"
                        });
                });

            modelBuilder.Entity("Placica.Core.Library.Entities.Pedido", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CliApellido")
                        .HasColumnType("text");

                    b.Property<string>("CliDireccion")
                        .HasColumnType("text");

                    b.Property<string>("CliEmail")
                        .HasColumnType("text");

                    b.Property<string>("CliIdentificacion")
                        .HasColumnType("text");

                    b.Property<string>("CliNombre")
                        .HasColumnType("text");

                    b.Property<string>("CliTelefono")
                        .HasColumnType("text");

                    b.Property<string>("CliTipoIdentificacion")
                        .HasColumnType("text");

                    b.Property<long>("ClienteId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("EmpDireccion")
                        .HasColumnType("text");

                    b.Property<string>("EmpEmail")
                        .HasColumnType("text");

                    b.Property<string>("EmpIdentificacion")
                        .HasColumnType("text");

                    b.Property<string>("EmpRazonSocial")
                        .HasColumnType("text");

                    b.Property<string>("EmpResponsables")
                        .HasColumnType("text");

                    b.Property<string>("EmpTelefonos")
                        .HasColumnType("text");

                    b.Property<string>("EmpTipoIdentificacion")
                        .HasColumnType("text");

                    b.Property<long>("EmpresaId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Envio")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("FechaDoc")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Impuesto")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("Placica.Core.Library.Entities.PedidoDetalle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<long>("PedidoId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductoId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal>("ValorUnitario")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.HasIndex("ProductoId");

                    b.ToTable("PedidoDetalles");
                });

            modelBuilder.Entity("Placica.Core.Library.Entities.Producto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CategoriaId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<long>("EmpresaId")
                        .HasColumnType("bigint");

                    b.Property<string>("Imagen")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.Property<string>("Presentacion")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("Placica.Core.Library.Entities.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUser")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Placica.Core.Library.Entities.Calificacion", b =>
                {
                    b.HasOne("Placica.Core.Library.Entities.ParametroDetalle", "ParametroDetalle")
                        .WithMany()
                        .HasForeignKey("ParametroDetalleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Placica.Core.Library.Entities.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId");
                });

            modelBuilder.Entity("Placica.Core.Library.Entities.Cliente", b =>
                {
                    b.HasOne("Placica.Core.Library.Entities.ParametroDetalle", "TipoIdentificacion")
                        .WithMany()
                        .HasForeignKey("TipoIdentificacionId");
                });

            modelBuilder.Entity("Placica.Core.Library.Entities.Empresa", b =>
                {
                    b.HasOne("Placica.Core.Library.Entities.Parametro", "Tipo")
                        .WithMany()
                        .HasForeignKey("TipoId");

                    b.HasOne("Placica.Core.Library.Entities.ParametroDetalle", "TipoIdentificacion")
                        .WithMany()
                        .HasForeignKey("TipoIdentificacionId");
                });

            modelBuilder.Entity("Placica.Core.Library.Entities.EmpresaCategoria", b =>
                {
                    b.HasOne("Placica.Core.Library.Entities.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Placica.Core.Library.Entities.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Placica.Core.Library.Entities.ParametroDetalle", b =>
                {
                    b.HasOne("Placica.Core.Library.Entities.Parametro", "Parametro")
                        .WithMany("ParamDetalle")
                        .HasForeignKey("ParametroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Placica.Core.Library.Entities.Pedido", b =>
                {
                    b.HasOne("Placica.Core.Library.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Placica.Core.Library.Entities.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Placica.Core.Library.Entities.PedidoDetalle", b =>
                {
                    b.HasOne("Placica.Core.Library.Entities.Pedido", "Pedido")
                        .WithMany("PedidoDetalles")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Placica.Core.Library.Entities.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Placica.Core.Library.Entities.Producto", b =>
                {
                    b.HasOne("Placica.Core.Library.Entities.Categoria", "Categoria")
                        .WithMany("Productos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Placica.Core.Library.Entities.Empresa", "Empresa")
                        .WithMany("Productos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
